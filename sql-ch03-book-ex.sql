-- #3. Returns one column from the Vendors table named Full Name-- Create this column from the VendorContactFName and VendorContactLName columns-- Format it as follows: last name, comma, first name (for example, “Doe, John”). -- Sort the result set by last name, then by first name.USE AP;SELECT (VendorContactLName + ', '+ VendorContactFName) AS 'Full Name'  FROM Vendors ORDER BY VendorContactLName, VendorContactFName;-- #6. Filter for contacts whose last name begins with the letter A, B, C, or E (not D).SELECT (VendorContactLName + ', '+ VendorContactFName) AS 'Full Name'  FROM Vendors WHERE VendorContactLName LIKE '[A, B, C, E]%' ORDER BY VendorContactLName, VendorContactFName;-- #7 Write a SELECT statement that determines whether the -- PaymentDate column of the Invoices table has any invalid values. -- To be valid, PaymentDate must be a null value if there’s a balance due -- and a non-null value if there’s no balance due. -- Code a compound condition in the WHERE clause that tests for these conditions.SELECT InvoiceNumber, PaymentDate, (InvoiceTotal - PaymentTotal - CreditTotal) as BalanceDue  FROM Invoices WHERE (PaymentDate IS NULL   AND (InvoiceTotal - PaymentTotal - CreditTotal) <= 0)    OR (PaymentDate IS NOT NULL  AND (InvoiceTotal - PaymentTotal - CreditTotal) > 0);